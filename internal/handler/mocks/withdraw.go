// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/withdraw.go

// Package handler_mock is a generated GoMock package.
package handler_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ilya372317/gophermart/internal/entity"
)

// MockWithdrawStorage is a mock of WithdrawStorage interface.
type MockWithdrawStorage struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawStorageMockRecorder
}

// MockWithdrawStorageMockRecorder is the mock recorder for MockWithdrawStorage.
type MockWithdrawStorageMockRecorder struct {
	mock *MockWithdrawStorage
}

// NewMockWithdrawStorage creates a new mock instance.
func NewMockWithdrawStorage(ctrl *gomock.Controller) *MockWithdrawStorage {
	mock := &MockWithdrawStorage{ctrl: ctrl}
	mock.recorder = &MockWithdrawStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawStorage) EXPECT() *MockWithdrawStorageMockRecorder {
	return m.recorder
}

// SaveWithdrawal mocks base method.
func (m *MockWithdrawStorage) SaveWithdrawal(arg0 context.Context, arg1 entity.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithdrawal indicates an expected call of SaveWithdrawal.
func (mr *MockWithdrawStorageMockRecorder) SaveWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithdrawal", reflect.TypeOf((*MockWithdrawStorage)(nil).SaveWithdrawal), arg0, arg1)
}

// UpdateUserBalanceByID mocks base method.
func (m *MockWithdrawStorage) UpdateUserBalanceByID(arg0 context.Context, arg1 uint, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalanceByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalanceByID indicates an expected call of UpdateUserBalanceByID.
func (mr *MockWithdrawStorageMockRecorder) UpdateUserBalanceByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalanceByID", reflect.TypeOf((*MockWithdrawStorage)(nil).UpdateUserBalanceByID), arg0, arg1, arg2)
}
