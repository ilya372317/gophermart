// Code generated by MockGen. DO NOT EDIT.
// Source: internal/orderproc/orderproc.go

// Package orderproc_mock is a generated GoMock package.
package orderproc_mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	accrual "github.com/ilya372317/gophermart/internal/accrual"
	entity "github.com/ilya372317/gophermart/internal/entity"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// GetOrderByNumber mocks base method.
func (m *MockOrderStorage) GetOrderByNumber(arg0 context.Context, arg1 int) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", arg0, arg1)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockOrderStorageMockRecorder) GetOrderByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockOrderStorage)(nil).GetOrderByNumber), arg0, arg1)
}

// GetOrderListByStatus mocks base method.
func (m *MockOrderStorage) GetOrderListByStatus(ctx context.Context, status string) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderListByStatus", ctx, status)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderListByStatus indicates an expected call of GetOrderListByStatus.
func (mr *MockOrderStorageMockRecorder) GetOrderListByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderListByStatus", reflect.TypeOf((*MockOrderStorage)(nil).GetOrderListByStatus), ctx, status)
}

// GetUserByID mocks base method.
func (m *MockOrderStorage) GetUserByID(arg0 context.Context, arg1 uint) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockOrderStorageMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockOrderStorage)(nil).GetUserByID), arg0, arg1)
}

// UpdateOrderAccrualByNumber mocks base method.
func (m *MockOrderStorage) UpdateOrderAccrualByNumber(arg0 context.Context, arg1 int, arg2 sql.NullFloat64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderAccrualByNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderAccrualByNumber indicates an expected call of UpdateOrderAccrualByNumber.
func (mr *MockOrderStorageMockRecorder) UpdateOrderAccrualByNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderAccrualByNumber", reflect.TypeOf((*MockOrderStorage)(nil).UpdateOrderAccrualByNumber), arg0, arg1, arg2)
}

// UpdateOrderStatusByNumber mocks base method.
func (m *MockOrderStorage) UpdateOrderStatusByNumber(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusByNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusByNumber indicates an expected call of UpdateOrderStatusByNumber.
func (mr *MockOrderStorageMockRecorder) UpdateOrderStatusByNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusByNumber", reflect.TypeOf((*MockOrderStorage)(nil).UpdateOrderStatusByNumber), arg0, arg1, arg2)
}

// UpdateUserBalanceByID mocks base method.
func (m *MockOrderStorage) UpdateUserBalanceByID(arg0 context.Context, arg1 uint, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalanceByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalanceByID indicates an expected call of UpdateUserBalanceByID.
func (mr *MockOrderStorageMockRecorder) UpdateUserBalanceByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalanceByID", reflect.TypeOf((*MockOrderStorage)(nil).UpdateUserBalanceByID), arg0, arg1, arg2)
}

// MockAccrualClient is a mock of AccrualClient interface.
type MockAccrualClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualClientMockRecorder
}

// MockAccrualClientMockRecorder is the mock recorder for MockAccrualClient.
type MockAccrualClientMockRecorder struct {
	mock *MockAccrualClient
}

// NewMockAccrualClient creates a new mock instance.
func NewMockAccrualClient(ctrl *gomock.Controller) *MockAccrualClient {
	mock := &MockAccrualClient{ctrl: ctrl}
	mock.recorder = &MockAccrualClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualClient) EXPECT() *MockAccrualClientMockRecorder {
	return m.recorder
}

// GetCalculation mocks base method.
func (m *MockAccrualClient) GetCalculation(arg0 int) (*accrual.CalculationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalculation", arg0)
	ret0, _ := ret[0].(*accrual.CalculationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalculation indicates an expected call of GetCalculation.
func (mr *MockAccrualClientMockRecorder) GetCalculation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculation", reflect.TypeOf((*MockAccrualClient)(nil).GetCalculation), arg0)
}
